/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */
type ParamValue = string | number | undefined;
/**
 * Append search params to a string
 */
export declare const appendSp: (sp?: Record<string, ParamValue | ParamValue[]>, prefix?: '?' | '&') => string;
/**
 * get the current search params
 *
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */
export declare const currentSp: () => Record<string, string>;
type NonFunctionKeys<T> = {
    [K in keyof T]: T[K] extends Function ? never : K;
}[keyof T];
type FunctionKeys<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never;
declare const AllObjs: {
    twitter: string;
    twitter_post: (params: {
        name: (string | number);
        id: (string | number);
    }) => string;
    gravatar: (params: {
        str: (string | number);
        s?: (number);
        d?: ("retro" | "identicon");
    }) => string;
    "GET /(servers)/server_func_get": string;
    "POST /(servers)/server_func_post": string;
    "GET /[[lang]]/contract": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "POST /[[lang]]/contract": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "GET /[[lang]]/site": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "GET /api/graphql": string;
    "POST /api/graphql": string;
    "GET /data/errors/[locale].json": (params: {
        locale: (string | number);
    }) => string;
    "default /[[lang]]/contract/[id]": (params: {
        id: (string | number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
        limit?: (number);
    }) => string;
    "create /[[lang]]/site": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "update /[[lang]]/site/[id]": (params: {
        id: (string | number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "delete /[[lang]]/site/[id]": (params: {
        id: (string | number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "noSatisfies /[[lang]]/site_contract": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "send /[[lang]]/site_contract/[siteId]-[contractId]": (params: {
        siteId: (string | number);
        contractId: (string | number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
        extra?: ('A' | 'B');
    }) => string;
    "/(rootGroup)": string;
    "/(rootGroup)/subGroup": string;
    "/(rootGroup)/subGroup/(anotherSub)/user": string;
    "/(rootGroup)/subGroup2": (params: {
        first: (string | number);
    }) => string;
    "/[[lang]]/contract": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }, sp?: Record<string, string | number>) => string;
    "/[[lang]]/contract/[id]": (params: {
        id: (string | number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "/[[lang]]/gp/(logged)/one": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "/[[lang]]/gp/(public)/two": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "/[[lang]]/main": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "/[[lang]]/match/[id=ab]": (params: {
        id: (Parameters<typeof import('../params/ab.ts').match>[0]);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "/[[lang]]/match/[id=int]": (params: {
        id: (number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
    }) => string;
    "/[[lang]]/site": (params?: {
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
        limit?: (number);
    }, sp?: Record<string, string | number>) => string;
    "/[[lang]]/site/[id]": (params?: {
        lang?: ('fr' | 'hu' | undefined);
        id?: (string);
        limit?: (number);
        demo?: (string);
    }) => string;
    "/[[lang]]/site_contract/[siteId]-[contractId]": (params: {
        siteId: (string | number);
        contractId: (string | number);
        lang?: ('fr' | 'en' | 'hu' | 'at' | string);
        limit?: (number);
    }) => string;
    "/a/[...rest]/z": (params: {
        rest: (string | number)[];
    }) => string;
    "/lay/(layVerySpecial)/normal": string;
    "/lay/(layVerySpecial)/root-layout": string;
    "/lay/(layVerySpecial)/skip": string;
    "/sp": string;
    "/spArray": string;
    "/spArrayComma": string;
};
type AllTypes = typeof AllObjs;
/**
 * To be used like this:
 * ```ts
 * import { route } from '$lib/ROUTES'
 *
 * route('site_id', { id: 1 })
 * ```
 */
export declare function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string;
export declare function route<T extends NonFunctionKeys<AllTypes>>(key: T): string;
/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from '$lib/ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
    PAGES: {
        '/(rootGroup)': never;
        '/(rootGroup)/subGroup': never;
        '/(rootGroup)/subGroup/(anotherSub)/user': never;
        '/(rootGroup)/subGroup2': never;
        '/[[lang]]/contract': 'lang';
        '/[[lang]]/contract/[id]': 'id' | 'lang';
        '/[[lang]]/gp/(logged)/one': 'lang';
        '/[[lang]]/gp/(public)/two': 'lang';
        '/[[lang]]/main': 'lang';
        '/[[lang]]/match/[id=ab]': 'id' | 'lang';
        '/[[lang]]/match/[id=int]': 'id' | 'lang';
        '/[[lang]]/site': 'lang';
        '/[[lang]]/site/[id]': 'lang' | 'id';
        '/[[lang]]/site_contract/[siteId]-[contractId]': 'siteId' | 'contractId' | 'lang';
        '/a/[...rest]/z': 'rest';
        '/lay/(layVerySpecial)/normal': never;
        '/lay/(layVerySpecial)/root-layout': never;
        '/lay/(layVerySpecial)/skip': never;
        '/sp': never;
        '/spArray': never;
        '/spArrayComma': never;
    };
    SERVERS: {
        'GET /(servers)/server_func_get': never;
        'POST /(servers)/server_func_post': never;
        'GET /[[lang]]/contract': 'lang';
        'POST /[[lang]]/contract': 'lang';
        'GET /[[lang]]/site': 'lang';
        'GET /api/graphql': never;
        'POST /api/graphql': never;
        'GET /data/errors/[locale].json': 'locale';
    };
    ACTIONS: {
        'default /[[lang]]/contract/[id]': 'id' | 'lang';
        'create /[[lang]]/site': 'lang';
        'update /[[lang]]/site/[id]': 'id' | 'lang';
        'delete /[[lang]]/site/[id]': 'id' | 'lang';
        'noSatisfies /[[lang]]/site_contract': 'lang';
        'send /[[lang]]/site_contract/[siteId]-[contractId]': 'siteId' | 'contractId' | 'lang';
    };
    LINKS: {
        'twitter': never;
        'twitter_post': 'name' | 'id';
        'gravatar': 'str';
    };
    Params: {
        first: never;
        lang: never;
        id: never;
        limit: never;
        demo: never;
        siteId: never;
        contractId: never;
        rest: never;
        locale: never;
        extra: never;
        name: never;
        str: never;
        s: never;
        d: never;
    };
};
export {};
