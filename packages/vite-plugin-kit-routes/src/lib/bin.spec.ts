import { execSync } from 'child_process'
import path from 'node:path'
import { describe, expect, it, suite } from 'vitest'

import { read } from '@kitql/internals'

const binPath = path.resolve(__dirname, 'bin.ts')

describe('bin', () => {
	suite('Working Happy Paths', () => {
		it('should show help when no command is provided', () => {
			try {
				execSync(`tsx --tsconfig .svelte-kit/tsconfig.json ${binPath}`, {})
			} catch (error) {
				expect(error).toMatchInlineSnapshot(`
				[Error: Command failed: tsx --tsconfig .svelte-kit/tsconfig.json /home/jycouet/udev/gh/lib/kitql/packages/vite-plugin-kit-routes/src/lib/bin.ts
				Usage: kit-routes [options] [command]

				CLI for kit-routes plugin

				Options:
				  -V, --version   output the version number
				  -h, --help      display help for command

				Commands:
				  sync [options]  Sync routes configuration
				  help [command]  display help for command
				]
			`)
			}
		})

		it('should generate ROUTES.ts with sync command', () => {
			execSync(`tsx --tsconfig .svelte-kit/tsconfig.json ${binPath} sync`, {})
			const output = read(path.resolve(__dirname, 'ROUTES.ts'))
			expect(output).toContain(`This file was generated by 'vite-plugin-kit-routes'`)
		})

		it('should generate ROUTES.ts with sync command and full config options', () => {
			execSync(
				`tsx --tsconfig .svelte-kit/tsconfig.json ${binPath} sync --config vite.config.ts#_kitRoutesConfig`,
				{},
			)
			const output = read(path.resolve(__dirname, 'ROUTES.ts'))
			expect(output).toContain(`This file was generated by 'vite-plugin-kit-routes'`)
		})
	})

	suite('Working Error Paths', () => {
		it('no export default', () => {
			try {
				execSync(
					`tsx --tsconfig .svelte-kit/tsconfig.json ${binPath} sync --config ./src/test/vite.config.noexportDefault.ts`,
					{},
				)
			} catch (error) {
				if (error instanceof Error) {
					expect(error.message).toContain('Missing')
					expect(error.message).toContain('export default { ... }')
					expect(error.message).toContain("or it's not a valid kit-routes config object")
				} else {
					expect('To never').toBe('be here')
				}
			}
		})

		it('no good default export', () => {
			try {
				execSync(`tsx --tsconfig .svelte-kit/tsconfig.json ${binPath} sync --config vite.config.ts`, {})
			} catch (error) {
				if (error instanceof Error) {
					expect(error.message).toContain('Missing')
					expect(error.message).toContain("or it's not a valid kit-routes config object")
				} else {
					expect('To never').toBe('be here')
				}
			}
		})

		it('no _plop export', () => {
			try {
				execSync(
					`tsx --tsconfig .svelte-kit/tsconfig.json ${binPath} sync --config ./src/test/vite.config.noexport.ts#_plop`,
					{},
				)
			} catch (error) {
				if (error instanceof Error) {
					expect(error.message).toContain('Missing')
					expect(error.message).toContain('export const _plop')
				} else {
					expect('To never').toBe('be here')
				}
			}
		})
	})
})
