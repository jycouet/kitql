/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

export const PAGES = {
  _ROOT: () => {
    return ensurePrefix(`/`)
  },
  contract: () => {
    return `/contract`
  },
  contract_id: (params: { id: string | number }) => {
    return `/contract/${params.id}`
  },
  gp_logged_one: () => {
    return `/gp/one`
  },
  gp_public_two: () => {
    return `/gp/two`
  },
  lang_lang: (params: { lang?: string | number } = {}) => {
    return `/lang${params?.lang ? `/${params?.lang}` : ''}`
  },
  match_id_int: (params: { id: string | number }) => {
    return `/match/${params.id}`
  },
  site: (params: { limit?: number } = {}) => {
    return `/site${appendSp({ limit: params.limit })}`
  },
  site_id: (params: { id?: string; limit?: number } = {}) => {
    params.id = params.id ?? ''
    return `/site/[id]${appendSp({ limit: params.limit })}`
  },
  site_contract_siteId_contractId: (params: {
    siteId: string | number
    contractId: string | number
  }) => {
    return `/site_contract/${params.siteId}-${params.contractId}`
  },
}

export const SERVERS = {
  contract: (method: 'GET' | 'POST') => {
    return `/contract`
  },
  site: (method: 'GET') => {
    return `/site`
  },
}

export const ACTIONS = {
  contract_id: (params: { id: string | number }) => {
    return `/contract/${params.id}`
  },
  site: (action: 'action1' | 'action2') => {
    return `/site?/${action}`
  },
  site_contract_siteId_contractId: (
    action: 'sendSomething',
    params: { siteId: string | number; contractId: string | number; extra?: 'A' | 'B' },
  ) => {
    return `/site_contract/${params.siteId}-${params.contractId}?/${action}${appendSp({
      extra: params.extra,
    })}`
  },
}

const appendSp = (sp?: Record<string, string | number | undefined>) => {
  if (sp === undefined) return ''
  const mapping = Object.entries(sp)
    .filter(c => c[1] !== undefined)
    .map(c => [c[0], String(c[1])])

  const formated = new URLSearchParams(mapping).toString()
  if (formated) {
    return `?${formated}`
  }
  return ''
}

const ensurePrefix = (str: string) => {
  if (str.startsWith('/')) {
    return str
  }
  return `/${str}`
}

/**
 * Add this type as a generic of the vite plugin `kitRoutes<ROUTES>`.
 *
 * Full example:
 * ```ts
 * import type { ROUTES } from '$lib/ROUTES'
 * import { kitRoutes } from 'vite-plugin-kit-routes'
 *
 * kitRoutes<ROUTES>({
 *  extend: {
 *    PAGES: {
 *      // here, "paths" it will be typed!
 *    }
 *  }
 * })
 * ```
 */
export type ROUTES = {
  PAGES: {
    _ROOT: never
    contract: never
    contract_id: 'id'
    gp_logged_one: never
    gp_public_two: never
    lang_lang: 'lang'
    match_id_int: 'id'
    site: 'limit'
    site_id: 'id' | 'limit'
    site_contract_siteId_contractId: 'siteId' | 'contractId'
  }
  SERVERS: { contract: never; site: never }
  ACTIONS: {
    contract_id: 'id'
    site: never
    site_contract_siteId_contractId: 'siteId' | 'contractId' | 'extra'
  }
}
