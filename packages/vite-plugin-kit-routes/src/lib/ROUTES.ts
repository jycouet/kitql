import { browser } from '$app/environment'
import { writable } from 'svelte/store'

/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

export const PAGES = {
  lang: (params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}`)
  },
  lang_contract: (params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/contract`)
  },
  lang_contract_id: (params: { lang?: string | number; id: string | number }) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/contract/${params.id}`)
  },
  lang_gp_logged_one: (params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/gp/one`)
  },
  lang_gp_public_two: (params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/gp/two`)
  },
  lang_match_id_int: (params: { lang?: string | number; id: string | number }) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/match/${params.id}`)
  },
  lang_site: (params: { lang?: string | number; limit?: number } = {}) => {
    return ensurePrefix(
      `${params?.lang ? `/${params?.lang}` : ''}/site${appendSp({ limit: params.limit })}`,
    )
  },
  lang_site_id: (params: { lang?: string; id?: string; limit?: number } = {}) => {
    params.lang =
      params.lang ??
      /* waiting for ✨ Runes ✨ to have a perfect api! get(kitRoutes)?.lang ?? */ 'fr'
    params.id = params.id ?? '7'
    return ensurePrefix(
      `${params?.lang ? `/${params?.lang}` : ''}/site/${params.id}${appendSp({
        limit: params.limit,
      })}`,
    )
  },
  lang_site_contract_siteId_contractId: (params: {
    lang?: string | number
    siteId: string | number
    contractId: string | number
    limit?: number
  }) => {
    return ensurePrefix(
      `${params?.lang ? `/${params?.lang}` : ''}/site_contract/${params.siteId}-${
        params.contractId
      }${appendSp({ limit: params.limit })}`,
    )
  },
}

export const SERVERS = {
  lang_contract: (method: 'GET' | 'POST', params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/contract`)
  },
  lang_site: (method: 'GET', params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/site`)
  },
}

export const ACTIONS = {
  lang_contract_id: (params: { lang?: string | number; id: string | number }) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/contract/${params.id}`)
  },
  lang_site: (action: 'action1' | 'action2', params: { lang?: string | number } = {}) => {
    return ensurePrefix(`${params?.lang ? `/${params?.lang}` : ''}/site?/${action}`)
  },
  lang_site_contract_siteId_contractId: (
    action: 'sendSomething',
    params: {
      lang?: string | number
      siteId: string | number
      contractId: string | number
      extra?: 'A' | 'B'
    },
  ) => {
    return ensurePrefix(
      `${params?.lang ? `/${params?.lang}` : ''}/site_contract/${params.siteId}-${
        params.contractId
      }?/${action}${appendSp({ extra: params.extra })}`,
    )
  },
}

const appendSp = (sp?: Record<string, string | number | undefined>) => {
  if (sp === undefined) return ''
  const mapping = Object.entries(sp)
    .filter(c => c[1] !== undefined)
    .map(c => [c[0], String(c[1])])

  const formated = new URLSearchParams(mapping).toString()
  if (formated) {
    return `?${formated}`
  }
  return ''
}

const ensurePrefix = (str: string) => {
  if (str.startsWith('/')) {
    return str
  }
  return `/${str}`
}

/**
 * Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
 *
 * Full example:
 * ```ts
 * import type { KIT_ROUTES } from '$lib/ROUTES'
 * import { kitRoutes } from 'vite-plugin-kit-routes'
 *
 * kitRoutes<KIT_ROUTES>({
 *  extend: {
 *    PAGES: {
 *      // here, "paths" it will be typed!
 *    }
 *  }
 * })
 * ```
 */
export type KIT_ROUTES = {
  PAGES: {
    lang: 'lang'
    lang_contract: 'lang'
    lang_contract_id: 'lang' | 'id'
    lang_gp_logged_one: 'lang'
    lang_gp_public_two: 'lang'
    lang_match_id_int: 'lang' | 'id'
    lang_site: 'lang' | 'limit'
    lang_site_id: 'lang' | 'id' | 'limit'
    lang_site_contract_siteId_contractId: 'lang' | 'siteId' | 'contractId' | 'limit'
  }
  SERVERS: { lang_contract: 'lang'; lang_site: 'lang' }
  ACTIONS: {
    lang_contract_id: 'lang' | 'id'
    lang_site: 'lang'
    lang_site_contract_siteId_contractId: 'lang' | 'siteId' | 'contractId' | 'extra'
  }
  Storage_Params: {
    lang: never
    id: never
    limit: never
    siteId: never
    contractId: never
    extra: never
  }
}

const _kitRoutes = <T>(key: string, initValues?: T) => {
  const store = writable<T>(initValues, set => {
    if (browser) {
      if (initValues) {
        const v = localStorage.getItem(key)
        if (v) {
          try {
            const json = JSON.parse(v)
            set(json)
          } catch (error) {
            set(initValues)
          }
        } else {
          set(initValues)
        }
      } else {
        set({} as any)
      }

      const handleStorage = (event: StorageEvent) => {
        if (event.key === key) set(event.newValue ? JSON.parse(event.newValue) : null)
      }
      window.addEventListener('storage', handleStorage)
      return () => window.removeEventListener('storage', handleStorage)
    } else {
      if (initValues) {
        set(initValues)
      } else {
        set({} as any)
      }
    }
  })

  return {
    subscribe: store.subscribe,
    update: (u: T) => {
      if (browser) {
        localStorage.setItem(key, JSON.stringify(u))
      }
      store.update(() => u)
    },
  }
}

export type StorageParams = { lang: 'en' | 'fr' | 'at' }
/**
 *
 * Example of usage:
 * ```ts
 *  import { afterNavigate } from '$app/navigation'
 *  import { kitRoutes } from '$lib/ROUTES.js'
 *
 *  afterNavigate(() => {
 *	  kitRoutes.update({ lang: $page.params.lang })
 *  })
 * ```
 *
 */
export let kitRoutes = _kitRoutes<StorageParams>('kitRoutes')
